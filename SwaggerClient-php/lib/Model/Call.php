<?php
/**
 * Call
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Upcall API
 *
 * A RESTful API (json) to manage your human-powered outbound call campaigns.
 *
 * OpenAPI spec version: 2
 * Contact: support@upcall.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Call Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Call implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Call';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'caller_id' => 'string',
        'contact_id' => 'string',
        'caller_name' => 'string',
        'note' => 'string',
        'status' => 'string',
        'duration' => 'int',
        'called_at' => '\DateTime',
        'campaigner_cost' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'caller_id' => null,
        'contact_id' => null,
        'caller_name' => null,
        'note' => null,
        'status' => null,
        'duration' => null,
        'called_at' => 'date-time',
        'campaigner_cost' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'caller_id' => 'caller_id',
        'contact_id' => 'contact_id',
        'caller_name' => 'caller_name',
        'note' => 'note',
        'status' => 'status',
        'duration' => 'duration',
        'called_at' => 'called_at',
        'campaigner_cost' => 'campaigner_cost'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'caller_id' => 'setCallerId',
        'contact_id' => 'setContactId',
        'caller_name' => 'setCallerName',
        'note' => 'setNote',
        'status' => 'setStatus',
        'duration' => 'setDuration',
        'called_at' => 'setCalledAt',
        'campaigner_cost' => 'setCampaignerCost'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'caller_id' => 'getCallerId',
        'contact_id' => 'getContactId',
        'caller_name' => 'getCallerName',
        'note' => 'getNote',
        'status' => 'getStatus',
        'duration' => 'getDuration',
        'called_at' => 'getCalledAt',
        'campaigner_cost' => 'getCampaignerCost'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_BUSY = 'busy';
    const STATUS_NO_ANSWER = 'no_answer';
    const STATUS_NO_SERVICE = 'no_service';
    const STATUS_TECHNICAL_ISSUE = 'technical_issue';
    const STATUS_IVR = 'ivr';
    const STATUS_FAX = 'fax';
    const STATUS_VOICEMAIL = 'voicemail';
    const STATUS_GENERAL_VOICEMAIL = 'general_voicemail';
    const STATUS_WRONG_VOICEMAIL = 'wrong_voicemail';
    const STATUS_CALL_BACK_LATER = 'call_back_later';
    const STATUS_HUNGUP = 'hungup';
    const STATUS_DNC = 'dnc';
    const STATUS_WRONG_NUMBER = 'wrong_number';
    const STATUS_ALTERNATIVE_PHONE = 'alternative_phone';
    const STATUS_BUSY_SEND_EMAIL = 'busy_send_email';
    const STATUS_NOT_INTERESTED = 'not_interested';
    const STATUS_MAYBE_INTERESTED = 'maybe_interested';
    const STATUS_COMPLETED = 'completed';
    const STATUS_COMPLETED_FU_CALL = 'completed_fu_call';
    const STATUS_COMPLETED_FU_EMAIL = 'completed_fu_email';
    const STATUS_COMPLETED_FU_INPERSON = 'completed_fu_inperson';
    const STATUS_UNTRIED = 'untried';
    const STATUS_SPEAKING = 'speaking';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BUSY,
            self::STATUS_NO_ANSWER,
            self::STATUS_NO_SERVICE,
            self::STATUS_TECHNICAL_ISSUE,
            self::STATUS_IVR,
            self::STATUS_FAX,
            self::STATUS_VOICEMAIL,
            self::STATUS_GENERAL_VOICEMAIL,
            self::STATUS_WRONG_VOICEMAIL,
            self::STATUS_CALL_BACK_LATER,
            self::STATUS_HUNGUP,
            self::STATUS_DNC,
            self::STATUS_WRONG_NUMBER,
            self::STATUS_ALTERNATIVE_PHONE,
            self::STATUS_BUSY_SEND_EMAIL,
            self::STATUS_NOT_INTERESTED,
            self::STATUS_MAYBE_INTERESTED,
            self::STATUS_COMPLETED,
            self::STATUS_COMPLETED_FU_CALL,
            self::STATUS_COMPLETED_FU_EMAIL,
            self::STATUS_COMPLETED_FU_INPERSON,
            self::STATUS_UNTRIED,
            self::STATUS_SPEAKING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['caller_id'] = isset($data['caller_id']) ? $data['caller_id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['caller_name'] = isset($data['caller_name']) ? $data['caller_name'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['called_at'] = isset($data['called_at']) ? $data['called_at'] : null;
        $this->container['campaigner_cost'] = isset($data['campaigner_cost']) ? $data['campaigner_cost'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['caller_id'] === null) {
            $invalid_properties[] = "'caller_id' can't be null";
        }
        if ($this->container['contact_id'] === null) {
            $invalid_properties[] = "'contact_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['caller_id'] === null) {
            return false;
        }
        if ($this->container['contact_id'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets caller_id
     * @return string
     */
    public function getCallerId()
    {
        return $this->container['caller_id'];
    }

    /**
     * Sets caller_id
     * @param string $caller_id
     * @return $this
     */
    public function setCallerId($caller_id)
    {
        $this->container['caller_id'] = $caller_id;

        return $this;
    }

    /**
     * Gets contact_id
     * @return string
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     * @param string $contact_id
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets caller_name
     * @return string
     */
    public function getCallerName()
    {
        return $this->container['caller_name'];
    }

    /**
     * Sets caller_name
     * @param string $caller_name name of the caller
     * @return $this
     */
    public function setCallerName($caller_name)
    {
        $this->container['caller_name'] = $caller_name;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note additional notes about the call
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Call status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration call duration in seconds
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets called_at
     * @return \DateTime
     */
    public function getCalledAt()
    {
        return $this->container['called_at'];
    }

    /**
     * Sets called_at
     * @param \DateTime $called_at called at date
     * @return $this
     */
    public function setCalledAt($called_at)
    {
        $this->container['called_at'] = $called_at;

        return $this;
    }

    /**
     * Gets campaigner_cost
     * @return double
     */
    public function getCampaignerCost()
    {
        return $this->container['campaigner_cost'];
    }

    /**
     * Sets campaigner_cost
     * @param double $campaigner_cost cost of the campaigner
     * @return $this
     */
    public function setCampaignerCost($campaigner_cost)
    {
        $this->container['campaigner_cost'] = $campaigner_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


