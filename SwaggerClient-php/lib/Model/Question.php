<?php
/**
 * Question
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Upcall API
 *
 * A RESTful API (json) to manage your human-powered outbound call campaigns.
 *
 * OpenAPI spec version: 2
 * Contact: support@upcall.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Question Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Question implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Question';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'question' => 'string',
        'answer_type' => 'string',
        'result' => 'string',
        'explanations' => 'string',
        'comment' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'position' => 'int',
        'commission' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'question' => null,
        'answer_type' => null,
        'result' => null,
        'explanations' => null,
        'comment' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'position' => null,
        'commission' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'question' => 'question',
        'answer_type' => 'answer_type',
        'result' => 'result',
        'explanations' => 'explanations',
        'comment' => 'comment',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'position' => 'position',
        'commission' => 'commission'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'question' => 'setQuestion',
        'answer_type' => 'setAnswerType',
        'result' => 'setResult',
        'explanations' => 'setExplanations',
        'comment' => 'setComment',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'position' => 'setPosition',
        'commission' => 'setCommission'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'question' => 'getQuestion',
        'answer_type' => 'getAnswerType',
        'result' => 'getResult',
        'explanations' => 'getExplanations',
        'comment' => 'getComment',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'position' => 'getPosition',
        'commission' => 'getCommission'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ANSWER_TYPE_LONG_ANSWER = 'long_answer';
    const ANSWER_TYPE_MULTIPLE_CHECKBOX = 'multiple_checkbox';
    const ANSWER_TYPE_MULTIPLE_RADIO = 'multiple_radio';
    const ANSWER_TYPE_STARS = 'stars';
    const ANSWER_TYPE_NPS = 'nps';
    const ANSWER_TYPE_EMAIL = 'email';
    const ANSWER_TYPE_SHORT_ANSWER = 'short_answer';
    const ANSWER_TYPE_APPOINTMENT = 'appointment';
    const ANSWER_TYPE_PHONE_NUMBER = 'phone_number';
    const ANSWER_TYPE_DATE = 'date';
    const ANSWER_TYPE_DIGITS = 'digits';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAnswerTypeAllowableValues()
    {
        return [
            self::ANSWER_TYPE_LONG_ANSWER,
            self::ANSWER_TYPE_MULTIPLE_CHECKBOX,
            self::ANSWER_TYPE_MULTIPLE_RADIO,
            self::ANSWER_TYPE_STARS,
            self::ANSWER_TYPE_NPS,
            self::ANSWER_TYPE_EMAIL,
            self::ANSWER_TYPE_SHORT_ANSWER,
            self::ANSWER_TYPE_APPOINTMENT,
            self::ANSWER_TYPE_PHONE_NUMBER,
            self::ANSWER_TYPE_DATE,
            self::ANSWER_TYPE_DIGITS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['question'] = isset($data['question']) ? $data['question'] : null;
        $this->container['answer_type'] = isset($data['answer_type']) ? $data['answer_type'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['explanations'] = isset($data['explanations']) ? $data['explanations'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['commission'] = isset($data['commission']) ? $data['commission'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getAnswerTypeAllowableValues();
        if (!in_array($this->container['answer_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'answer_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getAnswerTypeAllowableValues();
        if (!in_array($this->container['answer_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets question
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     * @param string $question Question text
     * @return $this
     */
    public function setQuestion($question)
    {
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets answer_type
     * @return string
     */
    public function getAnswerType()
    {
        return $this->container['answer_type'];
    }

    /**
     * Sets answer_type
     * @param string $answer_type the type of response allowed for the question
     * @return $this
     */
    public function setAnswerType($answer_type)
    {
        $allowed_values = $this->getAnswerTypeAllowableValues();
        if (!is_null($answer_type) && !in_array($answer_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'answer_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['answer_type'] = $answer_type;

        return $this;
    }

    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     * @param string $result The answer to the question. If question.response_type nps, stars, multiple_checkbox, multiple_radio then result will contain all selected options separated by comma.
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets explanations
     * @return string
     */
    public function getExplanations()
    {
        return $this->container['explanations'];
    }

    /**
     * Sets explanations
     * @param string $explanations Explanation for question
     * @return $this
     */
    public function setExplanations($explanations)
    {
        $this->container['explanations'] = $explanations;

        return $this;
    }

    /**
     * Gets comment
     * @return bool
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     * @param bool $comment
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets position
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param int $position Question's position
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets commission
     * @return float
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     * @param float $commission Question's commission
     * @return $this
     */
    public function setCommission($commission)
    {
        $this->container['commission'] = $commission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


